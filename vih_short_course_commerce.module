<?php
/**
 * @file
 * Code for the VIH Short Course Commerce feature.
 */

include_once('vih_short_course_commerce.features.inc');

/**
 * Implements hook_migrate_api().
 */
function vih_short_course_commerce_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'VIHShortCourseBasicProduct' => array('class_name' => 'VIHShortCourseBasicProduct'),
      'VIHShortCourseBasicNode' => array('class_name' => 'VIHShortCourseBasicNode'),
    ),
  );

  return $api;
}

/**
* Implements hook_admin_paths().
*/
function vih_short_course_commerce_admin_paths() {
  $paths = array(
    'node/*/registrations' => TRUE,
    'node/*/registrations/*' => TRUE,
    'node/*/email' => TRUE,    
  );
  return $paths;
}

/**
 * Implementation of hook_form_FORMID_alter().
 */
function vih_short_course_commerce_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {

  $entity = entity_load_single($form_state['context']['entity_type'], $form_state['context']['entity_id']);

  // Default values for the registration form.
  if (!module_exists('panels') || !panels_get_current_page_display()) {
    $form['cart_form_header']['#markup'] = '<h2 id="add-to-cart-form-registration">' . t('Registration', array(), array('context' => 'vih-registration')) . '</h2>';
    $form['cart_form_header']['#weight'] = -100;
  }
  $form['submit']['#value'] = t('Sign up');

  // Checks whether event has been published
  if (!_vih_commerce_is_published($entity)) {
    $form['unpublished_event']['#markup'] = '<div class="info">' .
      t('This event has not been published. You can browse our website for other events.') . '</div>';
    unset($form['line_item_fields']);
    $form['submit']['#value'] = t('Event is unpublished');
    $form['submit']['#disabled'] = TRUE;
  }
  // Checks whether current registration is i process on another course.
  elseif (_vih_commerce_registration_in_progress_on_other_course($entity)) {
    $form['pending_order_msg']['#markup'] = '<div class="info">' .
      t('You have already started a registration. Please finish that registration before proceding. ') .
      l(t('Go to your current registration'), 'cart') .
      '.</div>';
    $form['pending_order_msg']['#weight'] = -99;
    $form['submit']['#value'] = t('Cannot sign up - please finish your other registration');
    $form['submit']['#disabled'] = TRUE;
    unset($form['line_item_fields']);
  }
  // Checks whether the event has expired
  elseif (_vih_commerce_is_expired($entity)) {
    $form['expired_event']['#markup'] = '<div class="info">' .
      t('This event has expired. You can browse our website for other events.') . '</div>';
    unset($form['line_item_fields']);
    $form['submit']['#value'] = t('Event has expired');
    $form['submit']['#disabled'] = TRUE;
  }
  // Checks whether a registration is in process on the current course.
  elseif (_vih_commerce_registration_in_progress_on_current_course($entity)) {
    $form['pending_order_msg']['#markup'] = '<div class="info">' .
        t('You already added some people. Add more or ') . 
        l(t('go to checkout'), 'checkout') . 
        '.</div>';
    $form['pending_order_msg']['#weight'] = -99;
  }
  // Default settings.
  else {
    if (_vih_commerce_is_out_of_stock($form['product_id']['#value'])) {
      $form['pending_order_msg']['#markup'] = '<p>' . t('No more empty slots for this event. Contact us for information about a waiting list.') . '</p>';
      $form['pending_order_msg']['#weight'] = -99;
      $form['submit']['#value'] = t('No more empty slots of this type');
      unset($form['line_item_fields']);
    }
    else {
      $form['pending_order_msg']['#markup'] = '<p>' . t('You can register as many people as you like. Add one at a time using the form below.') . '</p>';
      $form['pending_order_msg']['#weight'] = -99;
    }
  }
  
  // Add prices to attribute selectors.
  if (isset($form['attributes'])) {
    foreach (element_children($form['attributes']) as $field) {
      foreach (field_get_items($form_state['context']['entity_type'], $entity, 'field_golf_product') as $product) {
        $product = commerce_product_load($product['product_id']);
        $attribute = reset(field_get_items('commerce_product', $product, $field));
        $label = $attribute['label'];
        $attribute = $attribute['value'];
        $item = reset(field_get_items('commerce_product', $product, 'commerce_price'));
        $price = commerce_currency_format($item['amount'], $item['currency_code'], $product);
        $label = $form['attributes'][$field]['#options'][$attribute];
        $form['attributes'][$field]['#options'][$attribute] = $label . ' (' . $price . ')';
      }
    }
  }  
  
  // Adding table with current people in the order.
  global $user;
  $order = commerce_cart_order_load($user->uid);
  if ($order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $view = views_get_view('vih_shopping_cart_summary');
    $view->set_arguments(array($order_wrapper->getIdentifier()));
    $view->hide_admin_links = TRUE;
    $form['current_order']['#markup'] = $view->preview();
    $form['current_order']['#weight'] = -99;
  }  

  // Add read only price field to add to cart form.
  if (isset($form_state['default_product']->commerce_price)){
    $form['display_price'] = field_view_field('commerce_product', $form_state['default_product'], 'commerce_price');
  }
  array_unshift($form['#submit'], 'vih_short_course_commerce_add_to_cart_form_submit_before');
}

/**
 * Submit handler: empty out the current cart.
 */
function vih_short_course_commerce_add_to_cart_form_submit_before($form, &$form_state) {
  global $user;

  // Get the current cart content.
  $order = commerce_cart_order_load($user->uid);

  // Empty the cart before adding any new products.
  if (!empty($order)) {
    // Add some logic to ensure that the cart will not be filled up with rented kayaks.
  }
}


/**
 * Clone module integration.
 *
 * $node = node_load(29);
 * vih_short_course_commerce_clone_node_alter($node, array('original_node' => $node));
 */
function vih_short_course_commerce_clone_node_alter(&$node, $context) {
  // Setup variables
  $product_reference_field = NULL;
  $type = $context['original_node']->type;
  $types = commerce_product_reference_node_types();

  // Check if we're cloning a content type with a product reference field.
  if (isset($types[$type])) {
    // Load the bundle field instances
    $field_instances = field_info_instances('node', $context['original_node']->type);
    foreach ($field_instances as $field_name => $config) {
      // Get the field instances field info, see if it is a product reference
      $field_info = field_info_field($field_name);
      if ($field_info['type'] == 'commerce_product_reference') {
        $product_reference_field = $field_name;
        break;
      }
    }
  }
  // If we didn't find the field, back out.
  if (!$product_reference_field) {
    return NULL;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  // Loop through the products of the node, create new.
  foreach ($wrapper->$product_reference_field as $delta => $product_wrapper) {
    // Create an empty Commerce Product entity, based on existing.
    $cloned_product = commerce_product_new($product_wrapper->getBundle());
    $cloned_product = array_merge((array) $cloned_product, (array) $product_wrapper->value());
    $cloned_product =(object) $cloned_product;

    // Reset some values.
    $cloned_product->product_id = NULL;
    $cloned_product->revision_id = NULL;

    // Randomize SKU
    $cloned_product_wrapper = entity_metadata_wrapper('commerce_product', $cloned_product);
    $cloned_product_wrapper->save();

    // Update reference
    $wrapper->$product_reference_field->offsetSet($delta, $cloned_product_wrapper->value());
  }
}

/**
 * Implements hook_commerce_product_type_info_alter().
 *
 * AutoSKU cannot be exported, but we can define patterns here.
 */
function vih_short_course_commerce_commerce_product_type_info_alter(&$product_types) {
  foreach ($product_types as $name => &$type) {
    // Only affect desired types.
    if (strpos($name, 'vih_short_') === FALSE && $name != 'vih_shourt_course_golf') {
      continue;
    }
    // Do not alter product types which have been configured through the UI.
    if ($type['autosku'] !== FALSE) {
      continue;
    }

    // Define the AutoSKU
    $product_types[$name]['autosku'] = array(
      'product_type' => $name,
      'pattern' => '[commerce-product:type]-[commerce-product:product-id]',
      'advanced' => array(
        'update_existing' => FALSE,
        'hide_sku' => FALSE,
        'case' => 0,
      )
    );
  }
}
