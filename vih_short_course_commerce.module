<?php
/**
 * @file
 * Code for the VIH Short Course Commerce feature.
 */

include_once('vih_short_course_commerce.features.inc');

/**
* Implements hook_admin_paths().
*/
function vih_short_course_commerce_admin_paths() {
  $paths = array(
    'node/*/registrations' => TRUE,
    'node/*/registrations/*' => TRUE,
    'node/*/email' => TRUE,    
  );
  return $paths;
}

/**
 * Implementation of hook_form_FORMID_alter().
 */
function vih_short_course_commerce_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {

  // Make sure that one product display has been registered before starting on a registration for a new product display.
  $entity = reset(entity_load($form_state['context']['entity_type'], array($form_state['context']['entity_id'])));

  $product_ids = vih_short_course_commerce_get_product_ids($entity);
  $cart_product_ids = vih_short_course_commerce_get_products_in_cart();
  $merged_ids = array_intersect($cart_product_ids, $product_ids);
  $is_cart_products_available = !empty($merged_ids);
  $course_is_expired = FALSE;

  // Checking for expired course.
  if (!empty($entity->field_course_time[LANGUAGE_NONE][0]['value2'])) {
    $timezone = $entity->field_course_time[LANGUAGE_NONE][0]['timezone'];
    $timezone_db = $entity->field_course_time[LANGUAGE_NONE][0]['timezone_db'];
    $time = $entity->field_course_time[LANGUAGE_NONE][0]['value2'] . ' ' . $timezone_db;
    $course_time = format_date(strtotime($time), 'custom', 'Y-m-d H:i:s', $timezone);
  }
  elseif (!empty($entity->field_date[LANGUAGE_NONE][0]['value2'])) {
    $timezone = $entity->field_date[LANGUAGE_NONE][0]['timezone'];
    $timezone_db = $entity->field_date[LANGUAGE_NONE][0]['timezone_db'];
    $time = $entity->field_date[LANGUAGE_NONE][0]['value2'] . ' ' . $timezone_db;
    $course_time = format_date(strtotime($time), 'custom', 'Y-m-d H:i:s', $timezone);
  }
  $course_is_expired = (strtotime($course_time) < time());

  // Default values for the registration form.
  if (!module_exists('views_content')) {
    $form['cart_form_header']['#markup'] = '<h2 id="add-to-cart-form-registration">' . t('Registration', array(), array('context' => 'vih-registration')) . '</h2>';
    $form['cart_form_header']['#weight'] = -100;
  }
  $form['submit']['#value'] = t('Sign up');

  // Checks whether event has been published
  if ($entity->status == 0) {
    $form['unpublished_event']['#markup'] = '<div class="info">' .
      t('This event has not been published. You can browse our website for other events.') . '</div>';
    unset($form['line_item_fields']);
    $form['submit']['#value'] = t('Event is unpublished');
    $form['submit']['#disabled'] = TRUE;
  }
  // Checks whether the event has expired
  elseif ($course_is_expired) {
    $form['expired_event']['#markup'] = '<div class="info">' .
      t('This event has expired. You can browse our website for other events.') . '</div>';
    unset($form['line_item_fields']);
    $form['submit']['#value'] = t('Event has expired');
    $form['submit']['#disabled'] = TRUE;
  }
  // Checks whether current registration is i process on another course.
  elseif ($is_cart_products_available === FALSE AND !empty($cart_product_ids)) {
    $form['pending_order_msg']['#markup'] = '<div class="info">' .
        t('You have already started a registration. Please finish that registration before proceding. ') . 
        l(t('Go to your current registration'), 'cart') . 
        '.</div>';
    $form['pending_order_msg']['#weight'] = -99;  
    $form['submit']['#value'] = t('Cannot sign up - please finish your other registration');
    $form['submit']['#disabled'] = TRUE;
    unset($form['line_item_fields']);
  }
  // Checks whether a registration is in process on the current course.
  elseif ($is_cart_products_available === TRUE AND !empty($cart_product_ids)) {
    $form['pending_order_msg']['#markup'] = '<div class="info">' .
        t('You already added some people. Add more or ') . 
        l(t('go to checkout'), 'checkout') . 
        '.</div>';
    $form['pending_order_msg']['#weight'] = -99;
  }
  // Default settings.
  else {
    $form['pending_order_msg']['#markup'] = '<p>' . t('You can register as many people as you like. Add one at a time using the form below.') . '</p>';
    $form['pending_order_msg']['#weight'] = -99;
    if (module_exists('commerce_stock')) {
      $product = commerce_product_load($form['product_id']['#value']);
      $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
      if (isset($product_wrapper->commerce_stock) ){
        if (!(isset($product_wrapper->commerce_stock_override) && $product_wrapper->commerce_stock_override->value() == 1)) {
          if ($product_wrapper->commerce_stock->value() <= 0) {
            $form['submit']['#value'] = t('No more empty slots of this type');
          }
        }
      }   
    }
  }
  
  // Add prices to attribute selectors.
  if (isset($form['attributes'])) {
    foreach (element_children($form['attributes']) as $field) {
      foreach (field_get_items($form_state['context']['entity_type'], $entity, 'field_golf_product') as $product) {
        $product = commerce_product_load($product['product_id']);
        $attribute = reset(field_get_items('commerce_product', $product, $field));
        $label = $attribute['label'];
        $attribute = $attribute['value'];
        $item = reset(field_get_items('commerce_product', $product, 'commerce_price'));
        $price = commerce_currency_format($item['amount'], $item['currency_code'], $product);
        $label = $form['attributes'][$field]['#options'][$attribute];
        $form['attributes'][$field]['#options'][$attribute] = $label . ' (' . $price . ')';
      }
    }
  }  
  
  // Adding table with current people in the order.
  global $user;
  $order = commerce_cart_order_load($user->uid);
  if ($order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $view = views_get_view('vih_shopping_cart_summary');
    $view->set_arguments(array($order_wrapper->getIdentifier()));
    $view->hide_admin_links = TRUE;
    $form['current_order']['#markup'] = $view->preview();
    $form['current_order']['#weight'] = -99;
  }  

  // Add read only price field to add to cart form.
  if (isset($form_state['default_product']->commerce_price)){
    $price = commerce_product_calculate_sell_price($form_state['default_product']);
    $form['display_price'] = array(
      '#title' => t('Price'),
      '#type' => 'item',
      '#markup' => '<span class="display-price-amount">' . commerce_currency_format($price['amount'], $price['currency_code']) . '</span>',
      '#prefix' => '<div class="display-price">',
      '#suffix' => '</div>',
    );
  }

  // Kayak courses - add possiblity to rent a kayak.
  if (!$course_is_expired AND $entity->type == 'vih_short_course_kajak') {
  
    if (!empty($entity->field_rent_kayak)) {

      $form['rent_kayak'] = array(
        '#type' => 'fieldset',
        '#title' => t('Additional products'),
        '#weight' => 20,
      );

      // Only one possible kayak product due to limitations on the content type.
      $kayak_product_id = $entity->field_rent_kayak[LANGUAGE_NONE][0]['product_id'];
      $kayak_product = commerce_product_load($kayak_product_id);

      $price = commerce_product_calculate_sell_price($kayak_product);
      $price = ' (' . commerce_currency_format($price['amount'], $price['currency_code']) . ')';

      $options = array(
        'none' => t('No, thanks'),
        $kayak_product->product_id => $kayak_product->title . ' <span class="kayak-price">'. $price . '</span>',        
      );

      $form['rent_kayak']['kayak'] = array(
        '#type' => 'radios',
        '#title' => t('Do you want to rent a kayak?'),
        '#options' => $options,
        '#default_value' => 'none',
        '#weight' => 20,
      );

      $options = array(
        'S' => t('Small'),
        'M' => t('Medium'),
        'L' => t('Large'),
        'XL' => t('X-Large'),        
      );
      
      $form['rent_kayak']['wetsuit_size'] = array(
        '#type' => 'radios',
        '#title' => t('Size for wetsuit'),
        '#options' => $options,
        '#default_value' => '',
        '#weight' => 25,
        '#states' => array(
          'invisible' => array(
            ':input[name="kayak"]' => array('value' => 'none'),
          ),
        ),
      );
      
      array_unshift($form['#submit'], 'vih_short_course_commerce_add_to_cart_form_submit_before');
      $form['#submit'][] = 'vih_short_course_commerce_add_to_cart_form_submit_after';
    }
  }
}

/**
 * Submit handler: empty out the current cart.
 */
function vih_short_course_commerce_add_to_cart_form_submit_before($form, &$form_state) {
  global $user;

  // Get the current cart content.
  $order = commerce_cart_order_load($user->uid);

  // Empty the cart before adding any new products.
  if (!empty($order)) {
    // Add some logic to ensure that the cart will not be filled up with rented kayaks.
  }
}

/**
 * Submit handler: add the products and redirect to the checkout page.
 */
function vih_short_course_commerce_add_to_cart_form_submit_after($form, &$form_state) {
  global $user;

  // Add any selected training.
  if (!empty($form_state['values']['kayak']) && is_numeric($form_state['values']['kayak']) && $form_state['values']['kayak'] != 'none') {
    $line_item = NULL;
    if ($product = commerce_product_load(check_plain($form_state['values']['kayak']))) {
      $line_item = commerce_product_line_item_new($product, check_plain($form_state['values']['quantity']), check_plain($form_state['line_item']->order_id), array(), 'vih_kayak');

      commerce_line_item_save($line_item);

      $line_item->field_wetsuit_size[LANGUAGE_NONE][0]['value'] = check_plain($form_state['values']['wetsuit_size']);
      
      $line_item->field_registrant_name[LANGUAGE_NONE][0]['value'] = check_plain($form_state['values']['line_item_fields']['field_registrant_name'][LANGUAGE_NONE][0]['value']);
      
      $line_item = commerce_line_item_load($line_item->line_item_id);

      $combine_products = FALSE;
      $line_item = commerce_cart_product_add($user->uid, $line_item, $combine_products);
    }
  }
}

/**
 * Finds product IDs for the particular product display in the add to cart form
 *
 * @param
 *  An entity with a product field
 *
 * @return
 *  An array of product ids
 */
function vih_short_course_commerce_get_product_ids($entity) {
  if (!empty($entity->field_golf_product[LANGUAGE_NONE])) {
    $products = $entity->field_golf_product[LANGUAGE_NONE];
  }
  elseif(!empty($entity->field_product[LANGUAGE_NONE])) {
    $products = $entity->field_product[LANGUAGE_NONE];
  }
  else {
    return array();
  }

  $ids = array();
  foreach ($products as $a) {
    $ids[] = $a['product_id'];
  }
  return $ids;
}

/**
 * Return the product_id values for all products in the cart
 *
 * @return
 *  An array of product ids
 */
function vih_short_course_commerce_get_products_in_cart() {
  $cart_product_ids = &drupal_static(__FUNCTION__);

  if (!isset($cart_product_ids)) {
    global $user;
    $cart_product_ids = array();
    $order = commerce_cart_order_load($user->uid);
    if ($order) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
        $product_wrapper = $line_item_wrapper->commerce_product;
        $cart_product_ids[] = $product_wrapper->product_id->value();
      }
    }

    $cart_product_ids = array_unique($cart_product_ids);
  }

  return $cart_product_ids;
}

/**
 * Implements hook_views_default_views_alter(&$views).
 */
function vih_short_course_commerce_views_default_views_alter(&$views) {
  $display =& $views['commerce_cart_form']->display['default'];
  // Add the name field to the view.
  $display->display_options['fields']['field_registrant_name']['id'] = 'field_registrant_name';
  $display->display_options['fields']['field_registrant_name']['table'] = 'field_data_field_registrant_name';
  $display->display_options['fields']['field_registrant_name']['field'] = 'field_registrant_name';
  $display->display_options['fields']['field_registrant_name']['relationship'] = 'commerce_line_items_line_item_id';

  // Remove quantity field and unit price.
  unset($display->display_options['fields']['edit_quantity']);
  unset($display->display_options['fields']['commerce_unit_price']);  
}

/**
 * Get the list of options for the field_kayak_extra_choice field for a specific product.
 */
function vih_short_course_kayak_extra_choice_options_for_node($nid) {
  // Use static cache for improved performance.
  static $options = array();
  if (isset($options[$nid])) {
    return $options[$nid];
  }

  $options[$nid] = array();
  $node_wrapper = entity_metadata_wrapper('node', $nid);
  foreach ($node_wrapper->field_kayak_extra_choices->value() as $choice) {
    list($key, $value) = explode('|', $choice);
    // If we have a value we also have a key.
    if (!empty($value)) {
      $options[$nid][$key] = $value;
    }
  }

  return $options[$nid];
}

/**
 * Implements hook_form_alter().
 */
function vih_short_course_commerce_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'commerce_cart_add_to_cart_form') !== FALSE) {
    // Handle single product values.
    $context = $form_state['context'];
    if (empty($context['display']['settings']) || empty($context['display']['settings']['line_item_type'])) {
      return;
    }
    if ($context['display']['settings']['line_item_type'] == 'vih_short_course_kayak') {
      if (!empty($context['entity_id']) && !empty($context['entity_type']) && $context['entity_type'] == 'node') {
        $options = vih_short_course_kayak_extra_choice_options_for_node($context['entity_id']);
        if (!empty($options)) {
          $form['line_item_fields']['field_kayak_extra_choice'][LANGUAGE_NONE]['#options'] = $options;
        }
        else {
          $form['line_item_fields']['field_kayak_extra_choice']['#access'] = FALSE;
        }
      }
    }
  }
}
